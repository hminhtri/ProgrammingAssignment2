library(fpc)
set.seed(4634)
face <- rFace(300,dMoNo=2,dNoEy=0,p=3)
grface <- as.integer(attr(face,"grouping"))
discrproj(face,grface, clnum=1, method="bc")$units
discrproj(face,grface, clnum=1, method="anc")$units
discrproj(face,grface, clnum=1, method="awc")$units
pamk(face,krange=1:5,criterion="ch",usepam=FALSE,critout=TRUE)
set.seed(20000)
face50 <- rFace(50,dMoNo=2,dNoEy=0,p=2)
pamk(dist(face50),krange=1:5,criterion="asw",critout=TRUE)
x <- c(1,2,3,6,6,7,8,120)
ff8 <- fixmahal(x)
summary(ff8)
ff9 <- fixmahal(x, mnc=3, startn=3)
summary(ff9)
set.seed(776655)
v1 <- rnorm(100)
v2 <- rnorm(100)
d1 <- sample(1:5,100,replace=TRUE)
d2 <- sample(1:4,100,replace=TRUE)
ldata <- cbind(v1,v2,d1,d2)
attributes(ldata)
fr <- flexmixedruns(ldata,
continuous=2,discrete=2,simruns=1,initial.cluster=c(rep(1,5),rep(2,45),
rep(3,50)),
control=list(minprior=0.1),
n.cluster=3,allout=FALSE)
dim(fr)
fr
print(fr$optsummary)
dface <- dist(face50)
dim(dface)
summary(dface)
hclusttreeCBI(face50,minlevel=2,method="complete",scaling=TRUE)
noisemclustCBI(face50,G=1:5,emModelNames="VVV",nnk=2)
mahalCBI(face50,clustercut=0.5)
disthclusttreeCBI(dface,minlevel=2,method="complete")
distnoisemclustCBI(dface,G=5,emModelNames="EEE",nnk=2,
mdsmethod="classical",
mdsdim=2)
set.seed(20000)
face100 <- rFace(100,dMoNo=2,dNoEy=0,p=2)
print(clusterboot(face100,B=2,clustermethod=speccCBI,showplots=TRUE,k=6,seed=50000))
print(clusterboot(face100,B=2,clustermethod=tclustCBI,showplots=TRUE,k=5,seed=50000,noisemethod=TRUE)))
print(clusterboot(face100,B=2,clustermethod=tclustCBI,showplots=TRUE,k=5,seed=50000,noisemethod=TRUE))
complete3 <- cutree(hclust(dface),3)
dim(complete3)
print(complete3)
cluster.stats(dface,complete3,G2=TRUE)
set.seed(55667788)
library(diptest)
data(crabs)
dc <- crabs[,4:8]
dim(dc)
cmo <- mclustBIC(crabs[,4:8],G=9,modelNames="EEE")
cmo
cm <- mclustBIC(crabs[,4:8],G=9,modelNames="EEE",
initialization=list(noise=(1:200)[sample(200,50)]))
dim(cm)
scm <- summary(cm,crabs[,4:8])
scm
scmo <- summary(cmo,crabs[,4:8])
scmo
summary(mergenormals(crabs[,4:8],scm,method="ridge.ratio",by=0.05))
summary(mergenormals(crabs[,4:8],scmo,method="ridge.uni",by=0.05))
summary(mergenormals(crabs[,4:8],scmo,method="dipuni",by=0.05))
summary(mergenormals(crabs[,4:8],scm,method="predictive",M=2))
set.seed(20000)
x1 <- rnorm(50)
y <- rnorm(100)
x2 <- rnorm(40,mean=20)
x3 <- rnorm(10,mean=25,sd=100)
x0 <- cbind(c(x1,x2,x3),y)
View(`x0`)
prediction.strength(x0,M=10,Gmax=4,
clustermethod=noisemclustCBI,
classification="qda")
prediction.strength(dist(x0),M=10,Gmax=4,
clustermethod=claraCBI,
classification="centroids")
q()
install.packages("swirl")
library("swirl", lib.loc="C:/Users/Tri/Documents/R/win-library/3.0")
swirl()
q()
x<-factor(c("yes","yes","no","yes",no))
x<-factor(c("yes","yes","no","yes","no"))
x
table(x)
x<-factor(c("yes","yes","no","yes","no"),levels(c("yes",""no)))
x<-factor(c("yes","yes","no","yes","no"),levels(c("yes","no")))
table(x)
x
x<-factor(c("yes","yes","no","yes","no"),levels=c("yes","no"))
table(x)
class(x)
unclass(x)
q()
hw1_data <- read.csv("C:/Users/Tri/Downloads/r-prog/hw1_data.csv")
View(hw1_data)
summary(hw1_data)
subset(hw1_data, Ozone > 31)
sub_hw1_data<- subset(hw1_data, Ozone > 31 & Temp > 90)
summary(sub_hw1_data)
summary( subset(hw1_data, Month==6))
summary( subset(hw1_data, Month==5))
q()
source('C:/Users/Tri/Downloads/r-prog/pollutantmean.R')
pollutantmean("C:\Users\Tri\Downloads\r-prog\specdata","sulfat",1:10)
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata","sulfat",1:10)
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata\001.csv","sulfat",1:10)
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata\001.csv",sulfat,1:10)
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata\\001.csv",sulfat,1:10)
source('C:/Users/Tri/Downloads/r-prog/pollutantmean.R')
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata\\001.csv",sulfat,1:10)
source('C:/Users/Tri/Downloads/r-prog/pollutantmean.R')
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata\\001.csv",sulfat,1:10)
pollutantmean("C:\\Users\\Tri\\Downloads\\r-prog\\specdata\\001.csv",sulfat,10)
x<-"C:\\Users\\Tri\\Downloads\\r-prog\\specdata"
x
x + "\\"
x & "\\"
x && "\\"
library("stringr", lib.loc="C:/Users/Tri/Documents/R/win-library/3.0")
library("swirl", lib.loc="C:/Users/Tri/Documents/R/win-library/3.0")
c(x, "\\")
swirl()
0
0
2
identical()
identical(x)
identical(y)
x
q()
swirl()
library("swirl", lib.loc="C:/Users/Tri/Documents/R/win-library/3.0")
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
exit()
x()
q()
getwd()
dir(".")
dir("r-prog")
dir("r-prog/specdata/")
q()
library(dataset)
library("dataset")
library("datasets")
data(iris)
?iris
summary(iris)
summary(subset(iris, iris[,"Species"]=="virginica"))
mean(subset(iris, iris[,"Species"]=="virginica"))
mean(subset(iris[,"Sepal.Length"], iris[,"Species"]=="virginica"))
apply(iris[,1:4],2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)[1]
sapply(split(mtcars$mpg,mtcars$cyl),mean)[1]-sapply(split(mtcars$mpg,mtcars$cyl),mean)[3]
mean(mtcars$mpg,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(subset(mtcars$mpg, mtcars[,"cyl"]==4))
mean(subset(mtcars$mpg, mtcars[,"cyl"]==4))-mean(subset(mtcars$mpg, mtcars[,"cyl"]==8))
mean(subset(mtcars$mpg, mtcars[,"cyl"]==8))
names(mtcars)
mean(subset(mtcars$hp, mtcars[,"cyl"]==4))-mean(subset(mtcars$hp, mtcars[,"cyl"]==8))
set.seed(1)
rpois(5,2)
set.seed(10)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
Rprof()
?lm
Rprof(NULL)
Rprof()
Rprof(NULL)
summaryRprof()
system.time()
?system.time
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
hist(y)
plot(y,x)
plot(y)
set.seed(1)
rpois(5, 2
)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
getwd()
setwd("C:/Coursera/RProgramming/")
dir()
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata")
head(cr)
summary(cr)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('~/.active-rstudio-document')
round(0.22255526,4)
source('C:/Coursera/RProgramming/corr.R')
source('C:/Coursera/RProgramming/corr.R')
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(round(cr,4),10)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
getwd()
setwd("..")
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
source("corr.R")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
cr <- corr("specdata", 1000)
cr <- sort(cr)
length(cr)
head(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
length(cr)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
round(cr,5)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(round(cr,5)
)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('C:/Coursera/RProgramming/corr.R')
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
source('C:/Coursera/RProgramming/rprog-scripts-submitscript1.R')
submit()
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
source("corr.R")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
submit()
source('C:/Coursera/RProgramming/corr.R')
submit()
submit()
submit()
outcome <- read.csv("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
dim(outcome)
names(outcome)
names(outcome[,11])
names(outcome)[11]
outcome[1:6:11]
outcome[1:6,11]
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
summary(outcome[,"state"])
summary(outcome[,state])
names(outcome)
summary(outcome[,"State"])
head(outcome[,"State"])
sum(outcome[,"State"])
head(outcome[,"State"],10)
str(outcome[,"State"])
cor(outcome[,"State"])
cor(outcome[,"State"],outcome[,"Hospital.Name"])
cor(outcome[,"State"],outcome[,"State"])
lapp(outcome[,"State"],outcome[,"State"],mean)
lapply(outcome[,"State"],outcome[,"State"],mean)
dim(outcome)
dim(outcome[complete.cases(outcome),])
head(outcome[complete.cases(outcome),])
names(outcome)
rm(list=ls())
hospi <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
dim(hospi)
head(hospi)
summary(hospi)
names(hospi)
View(hospi)
hospVal <- hospi[complete.cases(hospi),]
rm(list=ls())
hospi <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospVal <- outcome[complete.cases(outcome),]
hospVal <- hospi[complete.cases(hospi),]
hospVal <- subset(hospi, !is.na(hospi)]
hospVal <- subset(hospi, !is.na(hospi))
rm(hospVal)
hospVal <- subset(hospi, !is.na(hospi$State))
rm(hospVal)
names(hospi)
rm(list=ls())
source('~/GitHub/ProgrammingAssignment2/example.R')
dir()
setwd("~/GitHub/ProgrammingAssignment2/")
dir()
log(-1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(10)
lm(y~x)
traceback()
debug(lm)
lm(y~x)
options(error=recover)
read.csv("nosuchfile")
q
str(mapply)
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(1:4,4:1)
mapply(rep,1:4,4:1)
system.time()
0
?options
getOption(error)
2
options(error=stop)
?lm
system.time(readLines("http://www.jhsph.edu"))
system.time(readLines("http://www.ctu.edu.vn"))
system.time(readLines("http://facebook.com.vn"))
system.time(readLines("http://facebook.com"))
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
summaryRprof()
$sample.interval
search()
dir()
source("cachematrix.R")
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
c<-rbind(c(1,-1/4, c(-1/4,1)))
c
c<-rbind(c(1,-1/4), c(-1/4,1))
c
solve(c)
solve(c)*c
qr.solve(c)*c
solve(c) %*% c
c
c<-rbind(c(1,4), c(4,1))
c
solve(c)
?solve
solve(c)%*%c
c<-rbind(c(1,4), c(4,3))
solve(c)%*%c
c
solve(c)
c
t(c)
c<-rbind(c(1,-1/4), c(-1/4,1))
c
t(c)
solve(c)
A<-matrix(c(2,1,1),c(3,2,1),c(2,1,2))
A
A<-matrix(c(2,1,1),c(3,2,1),c(2,1,2),nrow=3,ncol=3)
A<-matrix(c(2,1,1,3,2,1,2,1,2),nrow=3,ncol=3)
A
A<-matrix(c(2,3,2,1,2,1,1,1,2),nrow=3,ncol=3)
A
solve(A)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/.active-rstudio-document')
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2))
a$get()
a$getmatrix()
cacheSolve(a)
cacheSolve(a)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
a
a$get()
cacheSolve(a)
a$getmatrix()
x<-makeCacheMatrix()
x$set(c(1:5))
x$get()
x$set(rnorm(10))
x$get()
x$getmatrix()
a$getmatrix()
